// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  firstName    String
  lastName     String
  email        String
  role         Role          @default(Guest)
  avatar       String
  cinema       Cinema?       @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  cinemaId     Int?
  transactions Transaction[]
}

enum Role {
  Admin
  Guest
}

model Cinema {
  id           Int           @id @default(autoincrement())
  staff        User[]
  location     String
  capacity     Int           @default(60)
  showRoom     Int           @default(5)
  revenue      Int           @default(0)
  event        Event?
  transactions Transaction[]
}

model Transaction {
  id       Int      @id @default(autoincrement())
  cinema   Cinema   @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  cinemaId Int
  guest    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  date     DateTime @default(now())
  total    Int
  orders   Order[]
}

model Order {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  movie         Movie       @relation(fields: [movieId], references: [id])
  movieId       Int
  quantity      Int
  type          Type
}

enum Type {
  D2
  D3
  IMAX
}

model Event {
  id        Int      @id @default(autoincrement())
  movies    Movie[]
  agendas   Agenda[]
  price2D   Int      @default(7)
  price3D   Int      @default(9)
  imaxPrice Int      @default(13)
  discount  Int      @default(10)
  condition Int      @default(4)
  cinema    Cinema   @relation(fields: [cinemaId], references: [id])
  cinemaId  Int
}

model Movie {
  id          Int      @id @default(autoincrement())
  releaseDate String
  genre       String
  title       String
  overview    String
  event       Event    @relation(fields: [eventId], references: [id])
  poster      String
  duration    String   @default("100 mins")
  agendas     Agenda[]
  orders      Order[]
  eventId     Int
}

model Agenda {
  id        Int      @id @default(autoincrement())
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  screening Int
  showTime  DateTime @db.Time
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
}
